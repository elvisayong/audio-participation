{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  // This is your Django API's base URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(async config => {\n  let token = localStorage.getItem('token');\n  const tokenExpiry = localStorage.getItem('tokenExpiry');\n\n  // Check if the token is expired\n  if (token && tokenExpiry && Date.now() >= tokenExpiry) {\n    try {\n      // Attempt to refresh the token using the refresh token\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await axios.post('http://localhost:8000/api/token/refresh/', {\n        refresh: refreshToken\n      });\n\n      // Store the new token and its expiry time\n      token = response.data.access;\n      localStorage.setItem('token', token);\n      localStorage.setItem('tokenExpiry', Date.now() + response.data.access_expires_in * 1000);\n\n      // Update the request's authorization header with the new token\n      config.headers.Authorization = `Bearer ${token}`;\n    } catch (error) {\n      console.error('Error refreshing token', error);\n\n      // If refresh fails, remove tokens from storage and redirect to login\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('tokenExpiry');\n      window.location.href = '/login';\n    }\n  } else if (token) {\n    // If the token is still valid, attach it to the authorization header\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","tokenExpiry","Date","now","refreshToken","response","post","refresh","data","access","setItem","access_expires_in","Authorization","error","console","removeItem","window","location","href","Promise","reject"],"sources":["C:/Users/awanchiri/audio participation/audio-participation-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:8000/api', // This is your Django API's base URL\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\napi.interceptors.request.use(\r\n    async (config) => {\r\n        let token = localStorage.getItem('token');\r\n        const tokenExpiry = localStorage.getItem('tokenExpiry');\r\n\r\n        // Check if the token is expired\r\n        if (token && tokenExpiry && Date.now() >= tokenExpiry) {\r\n            try {\r\n                // Attempt to refresh the token using the refresh token\r\n                const refreshToken = localStorage.getItem('refreshToken');\r\n                const response = await axios.post('http://localhost:8000/api/token/refresh/', {\r\n                    refresh: refreshToken,\r\n                });\r\n\r\n                // Store the new token and its expiry time\r\n                token = response.data.access;\r\n                localStorage.setItem('token', token);\r\n                localStorage.setItem('tokenExpiry', Date.now() + response.data.access_expires_in * 1000);\r\n\r\n                // Update the request's authorization header with the new token\r\n                config.headers.Authorization = `Bearer ${token}`;\r\n            } catch (error) {\r\n                console.error('Error refreshing token', error);\r\n\r\n                // If refresh fails, remove tokens from storage and redirect to login\r\n                localStorage.removeItem('token');\r\n                localStorage.removeItem('refreshToken');\r\n                localStorage.removeItem('tokenExpiry');\r\n                window.location.href = '/login';\r\n            }\r\n        } else if (token) {\r\n            // If the token is still valid, attach it to the authorization header\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEFH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACxB,MAAOC,MAAM,IAAK;EACd,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACzC,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;;EAEvD;EACA,IAAIF,KAAK,IAAIG,WAAW,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIF,WAAW,EAAE;IACnD,IAAI;MACA;MACA,MAAMG,YAAY,GAAGL,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMK,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,0CAA0C,EAAE;QAC1EC,OAAO,EAAEH;MACb,CAAC,CAAC;;MAEF;MACAN,KAAK,GAAGO,QAAQ,CAACG,IAAI,CAACC,MAAM;MAC5BV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;MACpCC,YAAY,CAACW,OAAO,CAAC,aAAa,EAAER,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGE,QAAQ,CAACG,IAAI,CAACG,iBAAiB,GAAG,IAAI,CAAC;;MAExF;MACAd,MAAM,CAACJ,OAAO,CAACmB,aAAa,GAAG,UAAUd,KAAK,EAAE;IACpD,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;MAE9C;MACAd,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;MAChChB,YAAY,CAACgB,UAAU,CAAC,cAAc,CAAC;MACvChB,YAAY,CAACgB,UAAU,CAAC,aAAa,CAAC;MACtCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACnC;EACJ,CAAC,MAAM,IAAIpB,KAAK,EAAE;IACd;IACAD,MAAM,CAACJ,OAAO,CAACmB,aAAa,GAAG,UAAUd,KAAK,EAAE;EACpD;EAEA,OAAOD,MAAM;AACjB,CAAC,EACAgB,KAAK,IAAK;EACP,OAAOM,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}